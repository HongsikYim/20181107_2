
20181107_practice3_git.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008af  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f0  00000000  00000000  00000aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b8  00000000  00000000  00001293  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000154c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000419  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009c  00000000  00000000  00001989  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001a25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	37 c0       	rjmp	.+110    	; 0x10a <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <stdlib.h>
#include <string.h>

int main(void)
{
	DDRD = 0xff;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
  a2:	12 ba       	out	0x12, r1	; 18
		{
			for(int j = 0 ; j < 8 ; j++)
			{
				if(i == 0)
				{
					PORTD = 1 << j;
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	70 e0       	ldi	r23, 0x00	; 0
				}
				else if(i == 1)
				{
					PORTD = 0x80 >> j;
  a8:	40 e8       	ldi	r20, 0x80	; 128
  aa:	50 e0       	ldi	r21, 0x00	; 0
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(void)
{
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
		{
			for(int j = 0 ; j < 8 ; j++)
			{
				if(i == 0)
				{
					PORTD = 1 << j;
  b0:	9b 01       	movw	r18, r22
  b2:	08 2e       	mov	r0, r24
  b4:	02 c0       	rjmp	.+4      	; 0xba <main+0x1c>
  b6:	22 0f       	add	r18, r18
  b8:	33 1f       	adc	r19, r19
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <main+0x18>
  be:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	35 ea       	ldi	r19, 0xA5	; 165
  c4:	ee e0       	ldi	r30, 0x0E	; 14
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	30 40       	sbci	r19, 0x00	; 0
  ca:	e0 40       	sbci	r30, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x28>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x32>
  d0:	00 00       	nop
	
	while (1)
	{
		for(int i = 0 ; i < 2; i++)
		{
			for(int j = 0 ; j < 8 ; j++)
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	88 30       	cpi	r24, 0x08	; 8
  d6:	91 05       	cpc	r25, r1
  d8:	59 f7       	brne	.-42     	; 0xb0 <main+0x12>
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
				{
					PORTD = 1 << j;
				}
				else if(i == 1)
				{
					PORTD = 0x80 >> j;
  de:	9a 01       	movw	r18, r20
  e0:	08 2e       	mov	r0, r24
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <main+0x4a>
  e4:	35 95       	asr	r19
  e6:	27 95       	ror	r18
  e8:	0a 94       	dec	r0
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <main+0x46>
  ec:	22 bb       	out	0x12, r18	; 18
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	35 ea       	ldi	r19, 0xA5	; 165
  f2:	ee e0       	ldi	r30, 0x0E	; 14
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	30 40       	sbci	r19, 0x00	; 0
  f8:	e0 40       	sbci	r30, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x56>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x60>
  fe:	00 00       	nop
	
	while (1)
	{
		for(int i = 0 ; i < 2; i++)
		{
			for(int j = 0 ; j < 8 ; j++)
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	88 30       	cpi	r24, 0x08	; 8
 104:	91 05       	cpc	r25, r1
 106:	59 f7       	brne	.-42     	; 0xde <main+0x40>
 108:	d1 cf       	rjmp	.-94     	; 0xac <main+0xe>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
